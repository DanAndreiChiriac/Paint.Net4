namespace PaintDotNet.DirectWrite
{
    using PaintDotNet;
    using PaintDotNet.ComponentModel;
    using PaintDotNet.Interop;
    using System;
    using System.Globalization;
    using System.Runtime.InteropServices;

    [PrecacheAutoGeneratedProxyFactory, NativeInterfaceID("b859ee5a-d838-4b5b-a2e8-1adc7d93db48")]
    public interface IDirectWriteFactory : IDirectWriteObject, IObjectRef, IDisposable, IIsDisposed
    {
        ITextRenderingParams CreateCustomTextRenderingParams(float gamma = 1.8f, float enhancedContrast = 0.5f, float clearTypeLevel = 0.5f, PixelGeometry pixelGeometry = 1, TextRenderingMode renderingMode = 0);
        IInlineObject CreateEllipsisTrimmingSign(ITextFormat textFormat);
        ITextLayout CreateGdiCompatibleTextLayout(string text, ITextFormat textFormat, float layoutWidth = 0f, float layoutHeight = 0f, float pixelsPerDip = 1f, Matrix3x2Float? transform = new Matrix3x2Float?(), bool useGdiNatural = false);
        ITextRenderingParams CreateMonitorTextRenderingParams(IntPtr hMonitor);
        ITextFormat CreateTextFormat(string fontFamilyName, [Optional] IFontCollection fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, CultureInfo locale);
        ITextLayout CreateTextLayout(string text, ITextFormat textFormat, float maxWidth = 65535f, float maxHeight = 65535f);
        ITextRenderingParams CreateTextRenderingParams();
        ITypography CreateTypography();
        IDirectWriteGdiInterop GetGdiInterop();
        IFontCollection GetSystemFontCollection(bool checkForUpdates);
    }
}

